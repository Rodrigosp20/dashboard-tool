import time
import numpy as np
import pandas as pd
import plotly.express as px  # pip install plotly
import plotly.graph_objects as go
import streamlit as st  # pip install streamlit
import math

# pip install openpyxl

# python -m streamlit run teste.py

st.set_page_config(
    page_title="Dashboard",
    page_icon="üè°",
    layout="wide",
)

hide_img_fs = '''
        <style>
        button[title="View fullscreen"]{
            visibility: hidden;}
        </style>
        '''

st.markdown(hide_img_fs, unsafe_allow_html=True)


##############################DEMONSTRA√á√ÉO E RESULTADOS###############################

def EBITDA_calc(col): 
    return round(st.session_state.df_demo_resultados.loc[0:4,col].sum()+st.session_state.df_demo_resultados.loc[13:14,col].sum()-(st.session_state.df_demo_resultados.loc[5:12,col].sum()+st.session_state.df_demo_resultados.loc[16,col].sum()),2)

def EBIT_calc(col):
    return round(st.session_state.df_demo_resultados.loc[18,col]-st.session_state.df_demo_resultados.loc[19:20,col].sum(), 2)
    
def result_antes_impostos_calc(col):
    return round(st.session_state.df_demo_resultados.loc[21:22,col].sum()-st.session_state.df_demo_resultados.loc[23,col].sum(), 2)
    
def result_liquido_calc(col):
    return round(st.session_state.df_demo_resultados.loc[24,col]-st.session_state.df_demo_resultados.loc[25,col], 2)    
    
def autofinanciamento_calc(col):
    return st.session_state.df_demo_resultados.loc[26:26,col].sum()+st.session_state.df_demo_resultados.loc[19:20,col].sum()+st.session_state.df_demo_resultados.loc[13:13,col].sum()+st.session_state.df_demo_resultados.loc[8:11,col].sum()
    
def vbp_calc(col):
    return st.session_state.df_demo_resultados.loc[0:1,col].sum()+st.session_state.df_demo_resultados.loc[3:4,col].sum()
    
def vab_calc(col):
    return st.session_state.df_demo_resultados.loc[30:30,col].sum()-st.session_state.df_demo_resultados.loc[5:6,col].sum()
    
def calc_demo_resultados_df():  
    for year in st.session_state.df_demo_resultados.columns[1:]:
        st.session_state.df_demo_resultados.at[18,year] = EBITDA_calc(year)
        st.session_state.df_demo_resultados.at[21,year] = EBIT_calc(year)
        st.session_state.df_demo_resultados.at[24,year] = result_antes_impostos_calc(year)
        st.session_state.df_demo_resultados.at[26,year] = result_liquido_calc(year)
        st.session_state.df_demo_resultados.at[29,year] = autofinanciamento_calc(year)
        st.session_state.df_demo_resultados.at[30,year] = vbp_calc(year)
        st.session_state.df_demo_resultados.at[31,year] = vab_calc(year)
    return st.session_state.df_demo_resultados
    
##############################BALAN√áO###############################
def ativo_nao_corrent_calc(col):
    return round(st.session_state.df_balanco.loc[1:11,col].sum() ,2)
    
def ativo_corrent_calc(col):
    return round(st.session_state.df_balanco.loc[13:25,col].sum() ,2)
    
def total_ativo_calc(col):
    return round(st.session_state.df_balanco.loc[0:0,col].sum()+st.session_state.df_balanco.loc[12:12,col].sum() ,2)
    
def total_capital_proprio(col):
    return round(st.session_state.df_balanco.loc[28:40,col].sum() ,2)
    
def passivo_nao_corrente(col):
    return round(st.session_state.df_balanco.loc[44:48,col].sum() ,2)
    
def passivo_corrente(col):
    return st.session_state.df_balanco.loc[50:60,col].sum()
    
def total_passivo(col):
    return round(st.session_state.df_balanco.loc[43:43,col].sum()+st.session_state.df_balanco.loc[49:49,col].sum() ,2)
    
def total_capital_proprio_mais_passivo(col):
    return round(st.session_state.df_balanco.loc[61:61,col].sum()+st.session_state.df_balanco.loc[41:41,col].sum() ,2)

def calc_balanco_df():
    for year in st.session_state.df_balanco.columns[1:]:
        st.session_state.df_balanco.at[0,year] = ativo_nao_corrent_calc(year)
        st.session_state.df_balanco.at[12,year] = ativo_corrent_calc(year)
        st.session_state.df_balanco.at[26,year] = total_ativo_calc(year)
        st.session_state.df_balanco.at[41,year] = total_capital_proprio(year)
        st.session_state.df_balanco.at[43,year] = passivo_nao_corrente(year)
        st.session_state.df_balanco.at[49,year] = passivo_corrente(year)
        st.session_state.df_balanco.at[61,year] = total_passivo(year)
        st.session_state.df_balanco.at[62,year] = total_capital_proprio_mais_passivo(year)
    return st.session_state.df_balanco
##############################INDICADORES############################
def margem_operacional(col):
    return (st.session_state.df_demo_resultados.loc[18,col] / st.session_state.df_demo_resultados.loc[0,col])

def margem_bruta(col):
    return (st.session_state.df_demo_resultados.loc[0,col]-st.session_state.df_demo_resultados.loc[5,col])/st.session_state.df_demo_resultados.loc[0,col]
    
def margem_liquida(col):
    return st.session_state.df_demo_resultados.loc[26,col]/st.session_state.df_demo_resultados.loc[0,col]
    
def nivel_valor_acrescentado(col):
    return st.session_state.df_demo_resultados.loc[31,col]/st.session_state.df_demo_resultados.loc[30,col]
    
def rentabilidade_ativo(col):
    return st.session_state.df_demo_resultados.loc[26,col]/st.session_state.df_balanco.loc[26,col]
  
def turnover_ativo(col):
    return st.session_state.df_demo_resultados.loc[0,col]/st.session_state.df_balanco.loc[26,col]
    
def rh_volume_negocios(col):
    return st.session_state.df_demo_resultados.loc[7,col]/st.session_state.df_demo_resultados.loc[0,col]
    
def fse_volume_negocios(col):
    return st.session_state.df_demo_resultados.loc[6,col]/st.session_state.df_demo_resultados.loc[0,col]
    
def cmvmc_volume_negocios(col):
    return st.session_state.df_demo_resultados.loc[5,col]/st.session_state.df_demo_resultados.loc[0,col]
    
def custos_volume_negocios(col):
    return (st.session_state.df_demo_resultados.loc[5,col]+st.session_state.df_demo_resultados.loc[6,col]+st.session_state.df_demo_resultados.loc[7,col])/st.session_state.df_demo_resultados.loc[0,col]

def prazo_medio_pagamentos(col):
    return (st.session_state.df_balanco.loc[50,col] / ((st.session_state.df_demo_resultados.loc[5,col]+st.session_state.df_demo_resultados.loc[6,col]) * 1.23)) * 365
    
def prazo_medio_recebimentos(col):
    return (st.session_state.df_balanco.loc[15,col] / (st.session_state.df_demo_resultados.loc[0,col]*1.23))*365
    
def valor_gerado_rh(col):
    return st.session_state.df_demo_resultados.loc[31,col]/st.session_state.df_demo_resultados.loc[32,col]
    
# def taxa_exportacao(col):
    # return 

def liquidez_geral(col):
    return st.session_state.df_balanco.loc[12,col]/st.session_state.df_balanco.loc[49,col]
    
def liquidez_reduzida(col):
    return (st.session_state.df_balanco.loc[12,col]-st.session_state.df_balanco.loc[13,col])/st.session_state.df_balanco.loc[49,col]
    
def liquidez_imediata(col):
    return st.session_state.df_balanco.loc[25,col]/st.session_state.df_balanco.loc[49,col]
    
def autonomia_financeira(col):
    return st.session_state.df_balanco.loc[41,col]/st.session_state.df_balanco.loc[26,col]
    
def endividamento(col):
    return st.session_state.df_balanco.loc[61,col]/st.session_state.df_balanco.loc[26,col]
    
def solvabilidade(col):
    return st.session_state.df_balanco.loc[26,col]/st.session_state.df_balanco.loc[61,col]
    
def alavancagem_financeira(col):
    return (st.session_state.df_balanco.loc[45,col]+st.session_state.df_balanco.loc[54,col])/(st.session_state.df_balanco.loc[41,col]+st.session_state.df_balanco.loc[45,col]+st.session_state.df_balanco.loc[54,col])
    
def rentabilidade_capital_investido(col):
    return (st.session_state.df_demo_resultados.loc[21,col]-st.session_state.df_demo_resultados.loc[25,col])/st.session_state.df_balanco.loc[26,col]

def rentabilidade_capital_proprio(col):
    return st.session_state.df_demo_resultados.loc[26,col]/st.session_state.df_balanco.loc[41,col]
    
def calc_indicadores_df():
    for year in st.session_state.df_indicadores.columns[2:]:
        st.session_state.df_indicadores.at[1,year] = margem_operacional(year)
        st.session_state.df_indicadores.at[2,year] = margem_bruta(year)
        st.session_state.df_indicadores.at[3,year] = margem_liquida(year)
        st.session_state.df_indicadores.at[4,year] = nivel_valor_acrescentado(year)
        st.session_state.df_indicadores.at[5,year] = rentabilidade_ativo(year)
        
        st.session_state.df_indicadores.at[7,year] = turnover_ativo(year)
        st.session_state.df_indicadores.at[8,year] = rh_volume_negocios(year)
        st.session_state.df_indicadores.at[9,year] = fse_volume_negocios(year)
        st.session_state.df_indicadores.at[10,year] = cmvmc_volume_negocios(year)
        st.session_state.df_indicadores.at[11,year] = custos_volume_negocios(year)
        st.session_state.df_indicadores.at[12,year] = prazo_medio_pagamentos(year)
        st.session_state.df_indicadores.at[13,year] = prazo_medio_recebimentos(year)
        st.session_state.df_indicadores.at[14,year] = valor_gerado_rh(year)
        #st.session_state.df_indicadores.at[15,year] = taxa_exportacao(year)
        st.session_state.df_indicadores.at[17,year] = liquidez_geral(year)
        st.session_state.df_indicadores.at[18,year] = liquidez_reduzida(year)
        st.session_state.df_indicadores.at[19,year] = liquidez_imediata(year)
        st.session_state.df_indicadores.at[21,year] = autonomia_financeira(year)
        st.session_state.df_indicadores.at[22,year] = endividamento(year)
        st.session_state.df_indicadores.at[23,year] = solvabilidade(year)
        st.session_state.df_indicadores.at[24,year] = alavancagem_financeira(year)
        st.session_state.df_indicadores.at[26,year] = rentabilidade_capital_investido(year)
        st.session_state.df_indicadores.at[27,year] = rentabilidade_capital_proprio(year)
    return st.session_state.df_indicadores
    
##############################DADOS DO SETOR#########################
def create_dados_setor_df():
    df_dados_setor = pd.DataFrame()
    df_dados_setor['R√∫bricas'] = ['Volume de Neg√≥cios', 'EBITDA', 'CMVMC','Gastos com Pessoal','FSE', 'Resultados L√≠quidos', 'Ativo', 'Passivo',
    'Capital pr√≥prio', 'Ativo corrente', 'Passivo corrente', 'Fornecedores', 'Clientes', 'Invent√°rios', 'Caixa e dep√≥sitos banc√°rios',
    'Financiamentos obtidos', 'Imposto', 'Taxa de VAB na CAE', 'Prazo m√©dio de pagamentos', 'Prazo m√©dio de recebimentos', 'EBIT', 
    'N√∫mero de pessoas ao servi√ßo', 'Valor acrescentado bruto (VAB)', 'Taxa de exporta√ß√£o', 'VAB em percentagem da produ√ß√£o']
    
    for year in st.session_state.df_todas_dimen.columns[1:]:
        
        df_dados_setor[int(year.split()[0])] = 0
    
    return df_dados_setor

def create_quartis_df():
    df_quartis = pd.DataFrame()
    df_quartis['Indicadores'] = ['Liquidez geral','Liquidez geral','Liquidez geral',
    'Liquidez reduzida','Liquidez reduzida','Liquidez reduzida',
    'Autonomia financeira','Autonomia financeira', 'Autonomia financeira',
    'Alavancagem financeira', 'Alavancagem financeira', 'Alavancagem financeira',
    'Margem EBITDA em percentagem dos rendimentos','Margem EBITDA em percentagem dos rendimentos','Margem EBITDA em percentagem dos rendimentos',
    'Rentabilidade do Capital Pr√≥prio','Rentabilidade do Capital Pr√≥prio','Rentabilidade do Capital Pr√≥prio']
    df_quartis['Quartil'] = ['Quartil 1','Mediana','Quartil 3','Quartil 1','Mediana','Quartil 3','Quartil 1','Mediana',
    'Quartil 3','Quartil 1','Mediana','Quartil 3','Quartil 1','Mediana','Quartil 3','Quartil 1','Mediana','Quartil 3',]
    
    for year in st.session_state.df_dimen_aplicavel.columns[1:]:
        df_quartis[year.split()[0]] = 0
    
    return df_quartis
    
    
##############################COMPARA√á√ÉO############################

def create_comparacao_df():
    st.session_state.df_comparacao = pd.DataFrame()
    
    st.session_state.df_comparacao['Indicador'] = ['Rentabilidade do Neg√≥cio','Margem Operacional','Margem Operacional','Margem Operacional',
    'Margem Bruta','Margem Bruta','Margem Bruta', 'Margem L√≠quida', 'Margem L√≠quida', 'Margem L√≠quida',
    'N√≠vel de Valor Acrescentado','N√≠vel de Valor Acrescentado','N√≠vel de Valor Acrescentado','Rentabilidade do Ativo',
    'Rentabilidade do Ativo','Rentabilidade do Ativo', 'Operacionais', 'Turnover do Ativo', 'Turnover do Ativo', 'Turnover do Ativo',
    '% Rh no Volume de Neg√≥cios','% Rh no Volume de Neg√≥cios', '% Rh no Volume de Neg√≥cios', '% FSE no Volume de Neg√≥cios',
    '% FSE no Volume de Neg√≥cios','% FSE no Volume de Neg√≥cios', '% CMVMC / Volume de neg√≥cios', '% CMVMC / Volume de neg√≥cios',
    '% CMVMC / Volume de neg√≥cios', '% Custos no Volume de Neg√≥cios','% Custos no Volume de Neg√≥cios','% Custos no Volume de Neg√≥cios',
    'Prazo M√©dio de Pagamentos','Prazo M√©dio de Pagamentos','Prazo M√©dio de Pagamentos', 'Prazo M√©dio de Recebimentos', 'Prazo M√©dio de Recebimentos',
    'Prazo M√©dio de Recebimentos', 'Valor gerado por RH', 'Valor gerado por RH', 'Valor gerado por RH', 'Taxa de Exporta√ß√£o', 'Taxa de Exporta√ß√£o',
    'Taxa de Exporta√ß√£o', 'Liquidez', 'Liquidez Geral', 'Liquidez Geral', 'Liquidez Geral', 'Liquidez Reduzida', 'Liquidez Reduzida', 'Liquidez Reduzida',
    'Liquidez imediata', 'Liquidez imediata', 'Liquidez imediata', 'Financeiros', 'Autonomia Financeira', 'Autonomia Financeira', 'Autonomia Financeira',
    'Endividamento', 'Endividamento', 'Endividamento', 'Solvabilidade', 'Solvabilidade', 'Solvabilidade', 'Alavancagem Financeira', 'Alavancagem Financeira',
    'Alavancagem Financeira', 'Retorno', 'Rentabilidade do Capital Investido', 'Rentabilidade do Capital Investido', 'Rentabilidade do Capital Investido',
    'Rentabilidade do Capital Pr√≥prio', 'Rentabilidade do Capital Pr√≥prio', 'Rentabilidade do Capital Pr√≥prio']
    
    st.session_state.df_comparacao['F√≥rmula de C√°lculo'] = [None,'EBITDA/Volume de Neg√≥cios', 'EBITDA/Volume de Neg√≥cios', 'EBITDA/Volume de Neg√≥cios',
    '(Volume de Neg√≥cios-CMVMC)/Volume de Neg√≥cios', '(Volume de Neg√≥cios-CMVMC)/Volume de Neg√≥cios', '(Volume de Neg√≥cios-CMVMC)/Volume de Neg√≥cios',
    'Resultados L√≠quidos / Volume de Neg√≥cios', 'Resultados L√≠quidos / Volume de Neg√≥cios', 'Resultados L√≠quidos / Volume de Neg√≥cios',
    'VAB/VBP x 100', 'VAB/VBP x 100', 'VAB/VBP x 100', 'Resultados L√≠quidos / Ativo', 'Resultados L√≠quidos / Ativo', 'Resultados L√≠quidos / Ativo',
    None, 'Volume de neg√≥cios/ Ativo', 'Volume de neg√≥cios/ Ativo', 'Volume de neg√≥cios/ Ativo', 'Gastos com pessoal / Volume de Neg√≥cios', 
    'Gastos com pessoal / Volume de Neg√≥cios', 'Gastos com pessoal / Volume de Neg√≥cios', 'FSE / Voluma de Neg√≥cios', 'FSE / Voluma de Neg√≥cios',
    'FSE / Voluma de Neg√≥cios', 'CMVMC / Volume de Neg√≥cios', 'CMVMC / Volume de Neg√≥cios', 'CMVMC / Volume de Neg√≥cios', '(CMVMC + FSE + Gastos com Pessoal) / Volume de Neg√≥cios',
    '(CMVMC + FSE + Gastos com Pessoal) / Volume de Neg√≥cios', '(CMVMC + FSE + Gastos com Pessoal) / Volume de Neg√≥cios', '(Fornecedores / (Compras x (1+Tx IVA)) x 365',
    '(Fornecedores / (Compras x (1+Tx IVA)) x 365', '(Fornecedores / (Compras x (1+Tx IVA)) x 365', 'Clientes / ((Vendas x (1+tx . IVA)) x 365', 'Clientes / ((Vendas x (1+tx . IVA)) x 365',
    'Clientes / ((Vendas x (1+tx . IVA)) x 365', 'VAB / N.¬∫ de Recursos Humanos', 'VAB / N.¬∫ de Recursos Humanos', 'VAB / N.¬∫ de Recursos Humanos',
    'Volume de Neg√≥cios Internacioal / Volume de Neg√≥cios', 'Volume de Neg√≥cios Internacioal / Volume de Neg√≥cios', 'Volume de Neg√≥cios Internacioal / Volume de Neg√≥cios',
    None, 'Ativo Corrente / Passivo Corrente', 'Ativo Corrente / Passivo Corrente', 'Ativo Corrente / Passivo Corrente', '(Ativo corrente - Invent√°rios) / Passivo Corrente',
    '(Ativo corrente - Invent√°rios) / Passivo Corrente', '(Ativo corrente - Invent√°rios) / Passivo Corrente', 'Caixa e Dep√≥sitos Banc√°rios / Passivo Corrente',
    'Caixa e Dep√≥sitos Banc√°rios / Passivo Corrente', 'Caixa e Dep√≥sitos Banc√°rios / Passivo Corrente', None,'Capital Pr√≥prio/Ativo', 'Capital Pr√≥prio/Ativo', 'Capital Pr√≥prio/Ativo',
    'Passivo/Ativo', 'Passivo/Ativo', 'Passivo/Ativo', 'Ativo/Passivo', 'Ativo/Passivo', 'Ativo/Passivo', 'Financiamento Obtido / (CP+Financiamentos Obtidos)', 'Financiamento Obtido / (CP+Financiamentos Obtidos)',
    'Financiamento Obtido / (CP+Financiamentos Obtidos)', None, '(Ebit - Imposto) / Ativo', '(Ebit - Imposto) / Ativo', '(Ebit - Imposto) / Ativo',
    'Resultado L√≠quido / Capital Pr√≥prio', 'Resultado L√≠quido / Capital Pr√≥prio', 'Resultado L√≠quido / Capital Pr√≥prio']
    
     
    st.session_state.df_comparacao['Entidade'] = [None, 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice'
    , 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', None, 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice'
    , 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice'
    , 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', None, 'Empresa','M√©dia do Setor','√çndice'
    , 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', None, 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice'
    , 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice', None, 'Empresa','M√©dia do Setor','√çndice', 'Empresa','M√©dia do Setor','√çndice'] 
     
    for year in st.session_state.df_demo_resultados.columns[1:]:
        st.session_state.df_comparacao[year] = 0
    
    return st.session_state.df_comparacao
    
    
def fill_comparacao_df():
    rows_empresa= [1,4,7,10,13,17,20,23,26,29,32,35,38,41,45,48,51,55,58,61,64,68,71]
    
    
    
    for year in st.session_state.df_comparacao.columns[3:]:
        st.session_state.df_comparacao.at[2,year] = st.session_state.df_dados_setor_todas.loc[1,year] / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[5,year] = (st.session_state.df_dados_setor_todas.loc[0,year] - st.session_state.df_dados_setor_todas.loc[2,year]) / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[8,year] = st.session_state.df_dados_setor_todas.loc[5,year] / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[11,year] = st.session_state.df_dados_setor_todas.loc[24,year] / 100
        st.session_state.df_comparacao.at[14,year] = st.session_state.df_dados_setor_todas.loc[5,year] / st.session_state.df_dados_setor_todas.loc[6,year]
        st.session_state.df_comparacao.at[18,year] = st.session_state.df_dados_setor_todas.loc[0,year] / st.session_state.df_dados_setor_todas.loc[6,year]
        st.session_state.df_comparacao.at[21,year] = st.session_state.df_dados_setor_todas.loc[3,year] / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[24,year] = st.session_state.df_dados_setor_todas.loc[4,year] / st.session_state.df_dados_setor_todas.loc[0,year]       
        st.session_state.df_comparacao.at[27,year] = st.session_state.df_dados_setor_todas.loc[2,year] / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[30,year] = (st.session_state.df_dados_setor_todas.loc[2,year]+st.session_state.df_dados_setor_todas.loc[3,year]+st.session_state.df_dados_setor_todas.loc[4,year]) / st.session_state.df_dados_setor_todas.loc[0,year]
        st.session_state.df_comparacao.at[33,year] = st.session_state.df_dados_setor_todas.loc[18,year]
        st.session_state.df_comparacao.at[36,year] = st.session_state.df_dados_setor_todas.loc[19,year]
        st.session_state.df_comparacao.at[39,year] = st.session_state.df_dados_setor_todas.loc[22,year] / st.session_state.df_dados_setor_todas.loc[21,year]
        st.session_state.df_comparacao.at[42,year] = st.session_state.df_dados_setor_todas.loc[23,year] 
        st.session_state.df_comparacao.at[46,year] = st.session_state.df_dados_setor_todas.loc[9,year] / st.session_state.df_dados_setor_todas.loc[10,year]
        st.session_state.df_comparacao.at[49,year] = (st.session_state.df_dados_setor_todas.loc[9,year]-st.session_state.df_dados_setor_todas.loc[13,year]) / st.session_state.df_dados_setor_todas.loc[10,year]
        st.session_state.df_comparacao.at[52,year] = st.session_state.df_dados_setor_todas.loc[14,year] / st.session_state.df_dados_setor_todas.loc[10,year]
        st.session_state.df_comparacao.at[56,year] = st.session_state.df_dados_setor_todas.loc[8,year] / st.session_state.df_dados_setor_todas.loc[6,year]
        st.session_state.df_comparacao.at[59,year] = st.session_state.df_dados_setor_todas.loc[7,year] / st.session_state.df_dados_setor_todas.loc[6,year]  
        st.session_state.df_comparacao.at[62,year] = st.session_state.df_dados_setor_todas.loc[6,year] / st.session_state.df_dados_setor_todas.loc[7,year] 
        st.session_state.df_comparacao.at[65,year] = (st.session_state.df_dados_setor_todas.loc[8,year]+st.session_state.df_dados_setor_todas.loc[15,year]) / st.session_state.df_dados_setor_todas.loc[15,year]
        st.session_state.df_comparacao.at[69,year] = (st.session_state.df_dados_setor_todas.loc[20,year]-st.session_state.df_dados_setor_todas.loc[16,year]) / st.session_state.df_dados_setor_todas.loc[6,year]
        st.session_state.df_comparacao.at[72,year] = st.session_state.df_dados_setor_todas.loc[5,year] / st.session_state.df_dados_setor_todas.loc[8,year]
  
        for row in rows_empresa:
            
            st.session_state.df_comparacao.at[row, year] = st.session_state.df_indicadores[st.session_state.df_indicadores['Indicador'] == st.session_state.df_comparacao.at[row, 'Indicador']][year].iloc[0]
            st.session_state.df_comparacao.at[row+2,year] = st.session_state.df_comparacao.at[row,year] / st.session_state.df_comparacao.at[row+1,year] * 100
            
        
    return st.session_state.df_comparacao
 

def normalizar_info_setor(file_path):
    infos_setor = pd.read_excel(file_path, sheet_name = "Portugal", header = 9, usecols="D:K")

    nome_setor = pd.read_excel(file_path, sheet_name = "Portugal", header = 1).iloc[0,3]
    dimensao = pd.read_excel(file_path, sheet_name = "Portugal", header = 1).iloc[2,3]

    #parse da coluna total
    infos_setor["Total"] = infos_setor["Total"].astype("str")
    infos_setor["Total"] = infos_setor["Total"].str.replace(" ", "")
    infos_setor["Total"] = pd.to_numeric(infos_setor["Total"], errors = "coerce")

    #parse da coluna valor m√©dio
    infos_setor["Valor M√©dio"] = infos_setor["Valor M√©dio"].astype("str")
    infos_setor["Valor M√©dio"] = infos_setor["Valor M√©dio"].str.replace(" ", "")
    infos_setor["Valor M√©dio"] = pd.to_numeric(infos_setor["Valor M√©dio"], errors ="coerce")

    #Ajuste unidade de medida da coluna total
    infos_setor["Total"] = np.where(infos_setor["Unidade de Medida"] == "Milhares de euros ", infos_setor["Total"] * 10**3, infos_setor["Total"])

    #Ajuste unidade de medida da coluna valor m√©dio
    infos_setor["Valor M√©dio"] = np.where(infos_setor["Unidade de Medida"] == "Milhares de euros ", infos_setor["Valor M√©dio"] * 10**3, infos_setor["Valor M√©dio"])


    infos_setor = infos_setor.drop(columns = "Unidade de Medida")

    #gera tabela transposta

    pivot_setor = pd.pivot_table(infos_setor, index =  "Rubrica", columns = "Ano")
    pivot_setor = pivot_setor.swaplevel(axis = 1)


    #ordena o √≠ndice primeiro de acordo com o ano, depois de cordo com a medida

    index_to_be = list()
    for i in range(2017, infos_setor["Ano"].max() + 1):
        for j in ["Quartil 1", "Mediana", "Quartil 3", "Valor M√©dio", "Total"]:
            index_to_be.append((i,j))

            
    new_index = pd.MultiIndex.from_tuples(index_to_be)

    pivot_ordered = pd.DataFrame(pivot_setor, columns = new_index)

    pivot_ordered.columns = [" ".join((str(i),str(j))) for i,j in pivot_ordered.columns.values]

    #substitui os nomes das r√∫bricas utilizadas pelo banco de portugal para a nomenclatura utilizada internamente

    nomes_substituir = {"Vendas e servi√ßos prestados" : "Volume de Neg√≥cios",
     "Resultado antes de deprecia√ß√µes, gastos de financiamento e impostos (EBITDA)" :"EBITDA",
     "Custo das mercadorias vendidas e das mat√©rias consumidas" : "CMVMC", 
     "Fornecimentos e servi√ßos externos": "FSE",
     "Resultado l√≠quido do per√≠odo" : "Resultados L√≠quidos",
     "Invent√°rios e ativos biol√≥gicos consum√≠veis": "Invent√°rios",
     "Imposto sobre o rendimento do per√≠odo" : "Imposto",
     "Gastos com o pessoal" : "Gastos com Pessoal",
     "Resultado antes de gastos de financiamento e impostos (EBIT)" : "EBIT",
     "EBITDA em percentagem do volume de neg√≥cios ":"Margem Operacional",
     "Margem l√≠quida em percentagem dos rendimentos" : "Margem l√≠quida",
     "Rendibilidade do ativo": "Rentabilidade do ativo",
     "Rendibilidade dos capitais pr√≥prios": "Rentabilidade do Capital Pr√≥prio"}
       
          
    for i in nomes_substituir.keys():           
        as_list = pivot_ordered.index.tolist()
        idx = as_list.index(i)
        as_list[idx] = nomes_substituir[i]
        pivot_ordered.index = as_list

    
    #gera o t√≠tulo da tabela, com o nome do setor
    pivot_ordered.index.names = [nome_setor[29:].strip() + "; " + dimensao[20:].strip()]
    
    return pivot_ordered






    
##############################MAIN############################

st.markdown("### Demonstra√ß√£o Resultados, Balan√ßo & Indicadores")
uploaded_file = st.file_uploader("Selecionar ficheiro Indicadores Macros")
uploaded_file = "C:\\Users\\Bruno\\OneDrive\\Ambiente de Trabalho\\STREAM\\dashboard-tool\\Indicadores_macros_backup_2606 .xlsb.xlsm"
if uploaded_file is not None:

    st.session_state.df_demo_resultados = pd.read_excel(uploaded_file, sheet_name="Demonstra√ß√£o de Resultados", skiprows=3)
    st.session_state.df_demo_resultados = st.session_state.df_demo_resultados.iloc[:,1:]
    
    st.session_state.df_balanco = pd.read_excel(uploaded_file, sheet_name="Balan√ßo", skiprows=3)
    st.session_state.df_balanco = st.session_state.df_balanco.iloc[:,1:]
    
    st.session_state.df_indicadores = pd.read_excel(uploaded_file, sheet_name="Indicadores", skiprows=2)
     
    st.session_state.df_demo_resultados = calc_demo_resultados_df()
    
    st.session_state.df_balanco = calc_balanco_df() 
    
    st.session_state.df_indicadores = calc_indicadores_df()
     

    with st.expander("Indicadores"):
        st.write(st.session_state.df_indicadores)
    
    with st.expander("Demonstra√ß√£o Resultados"):
        
        st.write(st.session_state.df_demo_resultados)
         
    with st.expander("Balan√ßo"):
        st.write(st.session_state.df_balanco)


st.markdown("### Dados do Setor")        
st.markdown("##### Todas as Dimens√µes")   
uploaded_file_todas_dimen = st.file_uploader("Selecionar ficheiro <Todas as dimens√µes>")

uploaded_file_todas_dimen = "C:\\Users\\Bruno\\OneDrive\\Ambiente de Trabalho\\STREAM\\dashboard-tool\\RelatorioQS.xls"

if uploaded_file_todas_dimen is not None:
    st.session_state.df_todas_dimen = normalizar_info_setor(uploaded_file_todas_dimen)
    with st.expander("Todas as Dimens√µes"):
        st.write(st.session_state.df_todas_dimen)
        

st.markdown("##### Dimens√£o Aplic√°vel")
uploaded_file_varias_dimen = st.file_uploader("Selecionar ficheiro <Micro, Pequena, M√©dia ou Grande dimens√µes>")  

uploaded_file_varias_dimen = "C:\\Users\\Bruno\\OneDrive\\Ambiente de Trabalho\\STREAM\\dashboard-tool\\RelatorioQS_micro.xls"

if uploaded_file_varias_dimen is not None:
    st.session_state.df_dimen_aplicavel = normalizar_info_setor(uploaded_file_varias_dimen)
    with st.expander("Dimens√£o Aplic√°vel"):
        st.write(st.session_state.df_dimen_aplicavel)
    
    
if uploaded_file_todas_dimen and uploaded_file_varias_dimen is not None:
    st.markdown("##### Dados") # mudar para outro nome ou ent√£o mudar o capitulo de cima
    st.session_state.df_dados_setor_todas = create_dados_setor_df()
    
    for year in st.session_state.df_dados_setor_todas.columns[1:]:
    
        my_range = [x for x in range(len(st.session_state.df_dados_setor_todas)) if x not in [17, 23]]

        

        for row in my_range: 
            st.session_state.df_dados_setor_todas.at[row,year] = st.session_state.df_todas_dimen.loc[st.session_state.df_dados_setor_todas.loc[row,'R√∫bricas'], str(year)+' Valor M√©dio']
        
        st.session_state.df_dados_setor_todas.at[17,year] = 123 #perguntar Taxa de VAB na CAE
        st.session_state.df_dados_setor_todas.at[23,year] = st.session_state.df_todas_dimen.loc['Vendas e servi√ßos prestados no mercado externo',str(year)+' Total'] / st.session_state.df_todas_dimen.loc['Volume de Neg√≥cios',str(year)+' Total']
        
    with st.expander("Dados do Setor - Todas as dimens√µes"):
        st.write(st.session_state.df_dados_setor_todas)
        
    
    
    st.session_state.df_dados_setor_aplicavel = create_dados_setor_df()
    for year in st.session_state.df_dados_setor_aplicavel.columns[1:]:
    
        my_range = [x for x in range(len(st.session_state.df_dados_setor_aplicavel)) if x not in [17, 23,24]]

        for row in my_range: 
            st.session_state.df_dados_setor_aplicavel.at[row,year] = st.session_state.df_dimen_aplicavel.loc[st.session_state.df_dados_setor_aplicavel.loc[row,'R√∫bricas'], str(year)+' Valor M√©dio']
        
        st.session_state.df_dados_setor_aplicavel.at[17,year] = 123 #perguntar Taxa de VAB na CAE
        st.session_state.df_dados_setor_aplicavel.at[23,year] = st.session_state.df_dimen_aplicavel.loc['Vendas e servi√ßos prestados no mercado externo',str(year)+' Total'] / st.session_state.df_dimen_aplicavel.loc['Volume de Neg√≥cios',str(year)+' Total']
        st.session_state.df_dados_setor_aplicavel.at[24,year] = st.session_state.df_dimen_aplicavel.loc['VAB em percentagem da produ√ß√£o',str(year)+' Valor M√©dio'] / 100
    with st.expander("Dados do Setor - Dimens√£o aplic√°vel"):
        st.write(st.session_state.df_dados_setor_aplicavel)
        
        

    st.session_state.df_quartis_todas = create_quartis_df()
    
    for year in st.session_state.df_quartis_todas.columns[2:]:
        for row in range(0,len(st.session_state.df_quartis_todas)): 
                st.session_state.df_quartis_todas.at[row,year] = st.session_state.df_todas_dimen.loc[st.session_state.df_quartis_todas.loc[row,'Indicadores'], str(year)+' '+st.session_state.df_quartis_todas.loc[row,'Quartil']] / 100
    
    with st.expander("Dados do Setor - Quartis - Todas as dimens√µes"):
        st.write(st.session_state.df_quartis_todas)
        
              
    st.session_state.df_quartis_varias = create_quartis_df()  
    
    for year in st.session_state.df_quartis_varias.columns[2:]:
        for row in range(0,len(st.session_state.df_quartis_varias)): 
                st.session_state.df_quartis_varias.at[row,year] = st.session_state.df_dimen_aplicavel.loc[st.session_state.df_quartis_varias.loc[row,'Indicadores'], str(year)+' '+st.session_state.df_quartis_varias.loc[row,'Quartil']] / 100
    
    with st.expander("Dados do Setor - Quartis - Dimens√£o aplic√°vel"):
        st.write(st.session_state.df_quartis_varias)
        
        
if uploaded_file_todas_dimen and uploaded_file_varias_dimen and uploaded_file is not None:        
    st.markdown('### Compara√ß√£o')    
    st.session_state.df_comparacao = create_comparacao_df()
    
    fill_comparacao_df()
    
    with st.expander("Compara√ß√£o"):
        st.data_editor(st.session_state.df_comparacao)
        
                
